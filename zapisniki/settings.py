"""
Django settings for zapisniki project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from typing import List

from django_redis import get_redis_connection
from huey import RedisHuey

from parlaminutes.tipko_source import Api

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-%4x4dua5ek5@boi7@&%g6c9$igs%p*0301xa!r-2m^!9jki+hz",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

ALLOWED_HOSTS: List[str] = [
    os.getenv("DOMAIN_NAME", "localhost"),
]
CSRF_TRUSTED_ORIGINS = [
    os.getenv("DJANGO_BASE_URL", "http://localhost"),
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party apps
    "huey.contrib.djhuey",
    # local apps
    "parlaminutes",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "zapisniki.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "zapisniki.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DB_HOST = os.getenv("DATABASE_HOST")
if DB_HOST:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "HOST": DB_HOST,
            "PORT": os.getenv("DATABASE_PORT", "5432"),
            "NAME": os.getenv("DATABASE_NAME"),
            "USER": os.getenv("DATABASE_USER"),
            "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.getenv("DJANGO_STATIC_URL_BASE", "static/")
STATIC_ROOT = os.getenv("DJANGO_STATIC_ROOT", os.path.join(BASE_DIR, "../static"))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


TIPKO_API_ENDPOINT = os.environ.get("TIPKO_API_ENDPOINT", "https://sampleurl.com")
TIPKO_API_USERNAME = os.environ.get("TIPKO_API_USERNAME", "password")
TIPKO_API_PASSWORD = os.environ.get("TIPKO_API_PASSWORD", "password")

GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY", "")


HUEY = RedisHuey(
    name="moja_aplikacija",
    host=os.getenv("REDIS_URL", "redis"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    password=os.getenv("REDIS_PASSWORD", None),
)


TIPKO_API_INSTANCE = Api(
    endpoint=TIPKO_API_ENDPOINT,
    username=TIPKO_API_USERNAME,
    password=TIPKO_API_PASSWORD,
)

DEFAULT_EXAMPLE_MINUTES = """
En
dva
tri
štir
pet
šest
...
"""
GEMINI_PROMPT_TEMPLATE = """You have access to the meeting transcript and an example of what a meeting record looks like. Your task is to create a structured meeting record based on the transcript."""
DEFAULT_EXAMPLE_FILE_PATH = os.path.join(BASE_DIR, "example_files/zapisnik.txt")

ENABLE_S3 = os.getenv("ENABLE_S3", False)
# DJANGO STORAGE SETTINGS
if ENABLE_S3:
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": os.getenv("AWS_ACCESS_KEY_ID", ""),
                "secret_key": os.getenv("AWS_SECRET_ACCESS_KEY", ""),
                "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME", ""),
                "region_name": os.getenv("AWS_REGION_NAME", "fr-par"),
                "endpoint_url": os.getenv(
                    "AWS_S3_ENDPOINT_URL", "https://s3.fr-par.scw.cloud"
                ),
                "location": os.getenv("AWS_LOCATION", "zapisnikar"),
                "file_overwrite": os.getenv("AWS_S3_FILE_OVERWRITE", False),
                "signature_version": os.getenv("AWS_S3_SIGNATURE_VERSION", "s3v4"),
                "querystring_auth": os.getenv("AWS_QUERYSTRING_AUTH", False),
                "default_acl": os.getenv("AWS_DEFAULT_ACL", "public-read"),
            },
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
