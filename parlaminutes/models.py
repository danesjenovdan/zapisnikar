from django.conf import settings
from django.db import models
from django.utils.translation import gettext as _


# behaviours
class Timestampable(models.Model):
    """
    An abstract base class model that provides self-updating
    `created_at` and `modified_at` fields.
    """

    created_at: models.DateTimeField = models.DateTimeField(
        auto_now_add=True, db_index=True
    )
    updated_at: models.DateTimeField = models.DateTimeField(
        auto_now=True, db_index=True
    )

    class Meta:
        abstract = True


# Create your models here.
class Minutes(Timestampable):
    class StatusChoices(models.TextChoices):
        WAITING_TRANSCRIPTION = "WAITING_TRANSCRIPTION", _("Waiting for transcription.")
        WAITING_MINUTES = "WAITING_MINUTES", _("Waiting on generated minutes.")
        COMPLETED = "COMPLETED", _("Completed.")
        ERROR = "ERROR", _("Error during processing.")

    status: models.CharField = models.CharField(
        _("Status of the minutes"),
        max_length=50,
        choices=StatusChoices.choices,
        default=StatusChoices.WAITING_TRANSCRIPTION,
    )
    title: models.CharField = models.CharField(
        _("Title of the transcript"),
        blank=False,
        null=False,
    )  # no need for max_length=150 since we're using sqlite or postgresql
    sound_file: models.FileField = models.FileField(
        _("Sound file of the thing."),
        upload_to="sound_files/",
        blank=True,
        null=True,
    )
    example_file: models.FileField = models.FileField(
        _("Example minutes."),
        upload_to="example_files/",
        blank=True,
        null=True,
    )
    transcript_file: models.FileField = models.FileField(
        _("Transcript file."),
        upload_to="transcript_files/",
        blank=True,
        null=True,
    )
    llm_minutes_file: models.FileField = models.FileField(
        _("Minutes generated by the LLM as a file."),
        upload_to="minutes_files/",
        blank=True,
        null=True,
    )
    transcribed_text: models.TextField = models.TextField(
        _("The actual transcript."),
        blank=True,
        null=True,
    )
    example_minutes: models.TextField = models.TextField(
        _("How the minutes should look like."),
        blank=True,
        null=True,
        default=settings.DEFAULT_EXAMPLE_MINUTES,
    )
    generated_minutes: models.TextField = models.TextField(
        _("Minutes generated by the LLM"),
        blank=True,
        null=True,
    )
    prompt: models.TextField = models.TextField(
        _("The prompt that was used to generate minutes"),
        blank=True,
        null=True,
        default=settings.GEMINI_PROMPT_TEMPLATE,
    )
    tipko_task_id: models.CharField = models.CharField(
        _("The Tipko task ID for transcription."),
        max_length=150,
        blank=True,
        null=True,
    )
    error_message: models.TextField = models.TextField(
        _("Error message, if any."),
        blank=True,
        null=True,
    )

    def __str__(self):
        return f"{self.title} / {self.created_at} / {self.status}"

    def set_waiting_minutes(self):
        self.status = self.StatusChoices.WAITING_MINUTES
        self.save()

    def set_completed(self):
        self.status = self.StatusChoices.COMPLETED
        self.save()

    def set_error(self, error_message: str = ""):
        self.status = self.StatusChoices.ERROR
        self.error_message = error_message
        self.save()

    @property
    def hydrated_prompt(self):
        return "\n---\n".join(
            (
                self.prompt,
                self.transcribed_text,
                self.example_minutes,
            )
        )
